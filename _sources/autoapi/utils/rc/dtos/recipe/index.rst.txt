:py:mod:`utils.rc.dtos.recipe`
==============================

.. py:module:: utils.rc.dtos.recipe


Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   utils.rc.dtos.recipe.Recipe




.. py:class:: Recipe(data={})

   .. py:method:: setData(self, data={})


   .. py:method:: getChildrenDatasets(self)

      It returns the output datasets when the recipe has run.
      :return: Dictionary of output datasets having name of dataset as the key and dataset object as value


   .. py:method:: getChildrenViewNames(self)

      It returns all the view names generated by the recipe
      :return: List of view names


   .. py:method:: showChildrenView(self, viewName)

      Shows the view by its name
      :param viewName: name of the view
      :type viewName: str
      :return:


   .. py:method:: addTransform(self, transform: utils.rc.dtos.transform.Transform)

      This adds a transform to the recipe
      :param transform: transform to be added


   .. py:method:: run(self)

      Runs the recipe


   .. py:method:: test(self, transform: utils.rc.dtos.transform.Transform, notebookPath=None)

      Tests the transform in the recipe. You can optionally provide the notebook path of template
      It uploads the notebook first and then run the test
      :param transform: Transform to be tested
      :param notebookPath: optionally provide the notebook path of template
      :return: RecipeTestResponse object


   .. py:method:: getOutNotebook(notebook_name, local_path)
      :staticmethod:


   .. py:method:: prepareForLocal(self, transform, contextId=None)


   .. py:method:: getOutputDatasetId(self)



